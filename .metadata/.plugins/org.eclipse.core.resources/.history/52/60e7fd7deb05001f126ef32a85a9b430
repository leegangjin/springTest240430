package com.ezen.test.handler;

import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.ezen.test.domain.FileVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class FileHandler {
	
	//실제 파일이 저장되는 경로
	private final String UP_DIR ="C:\\myProject\\java\\fileUpload";
;

	public List<FileVO> uploadFiles(MultipartFile[] files) {
		List<FileVO> flist = new ArrayList<FileVO>();
		
		//MultipartFile[] 받아서 FileVO형태의 List로 생성 후 리턴
		
		//오늘 날짜로 경로생성(가변형태로 저장)년 월 일 폴더를 구성
		
		//오늘 날짜 경로 생성
		LocalDate date = LocalDate.now();
		String today = date.toString();
		log.info(">>>today>>>{}",today);
		
		//오늘 날짜를 폴더형식으로 구성
		today = today.replace("-", File.separator); 
		//C:\\myProject\\java\\fileUpload\\2024\\04\\29
		
		File folders = new File(UP_DIR,today);
		
		//폴더 생성 => mkdir ( 폴더 1개 생성 ) , mkdirs(하위 폴더까지 구조로 생성)
		//exists :  있는지 ㅇ벗는지 확인
		if(!folders.exists()) {
			folders.mkdirs(); //폴더 생성 명령
		}
		
		//리스트 설정
		 for(MultipartFile file : files) {
			 FileVO fvo = new FileVO();
			 fvo.setSave_dir(today);
			 fvo.setFile_size(file.getSize()); //return long
			 
			 //getOriginalFileName() : 경로+파일명. 파일 경로를 포함하는 케이스도 있음.
			 String originalFileName = file.getOriginalFilename();
			 String onlyFileName = originalFileName.substring(
					originalFileName.lastIndexOf(File.separator)+1); //실파일명만 추출
			 fvo.setFile_name(onlyFileName);
			 
			 //UUID 생성
			 UUID uuid = UUID.randomUUID();
			 String uuidStr = uuid.toString();
			 fvo.setUuid(uuidStr);
					 
			 
			 // 여기까지 fvo ㄴㄷㅅ샤ㅜㅎ dhksfy
			 //bno , file type
			 
			 //디스크에 저장
			 //디스크에 저장할 파일 객체 생성 -> 저장
			 //uuid_fileName / uuid_th_fileName
			 String fullFileName = uuidStr+"_"onlyFileName;
		 }
		
		
		
		
		return flist;
	}

}
